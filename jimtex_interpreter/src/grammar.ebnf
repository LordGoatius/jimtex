(* FIXME/TODO/NOTE: Add way to define theorems, definitions, and proofs *)
(* 
(* Identifiers *)
(* Identifier: All letters, with subscript to delineate different ones maybe, OR *)
(* using a greek letter with a subscript        *)
(* Ex: ident, a, b, \sigma_1, \sigma_4          *)
(* 
(* Functions *)
(* Definition: ident: type \rightarrow type     *)
(* Declaration: ident(ident, ...) = {body}      *)
(* NOTE: Piecewise tbd                          *)

(* Relations?: Function or something else?      *)
(* NOTE: Trait system perhaps?                  *)

(* Constants                                    *)
(* ident = {value},                             *)

(* Operations: *)
(* Multiplication: \times OR *                  *)
(* Division: \div OR \frac{}{} OR /             *)
(* Addition: +                                  *)
(* Subtraction: -                               *)
(* Set Subtraction: \setminus                   *)
(* Set Union: \cup                              *)
(* Set Intersection: \cap                       *)
(* Factorial: ! or \factorial                   *)
(* TODO: Xor,                                   *)
(* TODO: And,                                   *)
(* TODO: Or                                     *)
(* Groups:                                      *)
(* TODO: Internal Direct Product                *)
(* TODO: External Direct Product                *)
(* ... *)
(* Unary:                                       *)
(* Negation: single                             *)
(* Boolean \neg                                 *)

(* Loops:                                       *)
(* \sum_{initialization/increment}^{condition} value OR expression *)
(* \prod ... same                               *)
(* \bigcup                                      *)
(* \bigcap                                      *)
(* \forall ???                                  *)

(* Comparisons: *)
(* Equivalence \\ NOTE: find a way to define an equivalence relation *)
(* Approx: \approx *)
(* \eq, =,  *)
(* Cmp: \leq, \geq, \less, \greater *)
(* Geometry: \ifcong, congruent *)
(* Sets: \ifin, \ifnotin *)

(* Statements: *)
(* Kinda like a declaration without initialization *)
(* \equiv *)
(* \sim *)
(* \simeq *)
(* \subset *)
(* \supset *)
(* \subseteq *)
(* \supseteq *)
(* \parallel *)
(* \perp *)
(* \models *)
(* \cong *)
(* \in *)
(* \ni *)

ascii_char = {a-z,A-Z}+ ;
numbers    = {0-9} ;

greek_letter = greek letter ;

program = { statement, "," }, statement ;

statement = function_definition
          | function_declaration
          | expression
          | conditional
          | evaluation
          | assignment ;

identifier = ascii_char
           | ascii_char "subscript" identifier
           | greek_letter ;

(* Context free notation fails us here, types are context dependent ðŸ˜”*)
(* I probably won't be attempting to define type in the grammar ???   *)
function_declaration = identifier, ":" type, "\rightarrow", type 
                     | (* recurrence AND subscript functions can go here *);

(* piecewise not defined yet :(   *)
function_definition = identifier, leftparen, { identifier }, rightparen, equals,
                      expression ;

binop = ? binop ? ;
unop  = ? unop  ? ;

(* this doesn't really work because of types and sets, but uh 
oh well don't wanna deal with that, so natrual and real numbers it is *)
(* AHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH *)
value = number, { number }
      | number, { number }, "." , number, { number };
      | unop, number;
      | leftparen, value, binop, value, rightparen
      | function_ident, rightparen, { value }, leftparen ;

(* all identifiers must represent valud sets *)
set_declaration = identifier, "=", leftparen, value, { value }, rightparen 
                | identifier, { "\union", identifier }
                | identifier, { "\inter", identifier } ;

conditional_same = ? conditionals that aren't \in or \ni ?
conditional_nsame = in | notin ;

conditional_op = conditional_same | conditional_nsame ;

conditional = value, conditional_op, value ;
